
PB_RGB_PROJ1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000791  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ef  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_1>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  9e:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <interrupt_init>:
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	39 f4       	brne	.+14     	; 0xb8 <interrupt_init+0x12>
  aa:	52 9a       	sbi	0x0a, 2	; 10
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8d bb       	out	0x1d, r24	; 29
  b0:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  b4:	5a 9a       	sbi	0x0b, 2	; 11
  b6:	18 c0       	rjmp	.+48     	; 0xe8 <interrupt_init+0x42>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	39 f4       	brne	.+14     	; 0xca <interrupt_init+0x24>
  bc:	53 9a       	sbi	0x0a, 3	; 10
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	8d bb       	out	0x1d, r24	; 29
  c2:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  c6:	5b 9a       	sbi	0x0b, 3	; 11
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <interrupt_init+0x42>
  ca:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
  ce:	89 13       	cpse	r24, r25
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <interrupt_init+0x42>
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	8c 60       	ori	r24, 0x0C	; 12
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8d b3       	in	r24, 0x1d	; 29
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	8d bb       	out	0x1d, r24	; 29
  de:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8c 60       	ori	r24, 0x0C	; 12
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <__vector_1>:
#define GREEN_LED		 PB1
#define BLUE_LED		PB2
int rgb_led_light_sequence []={0x01,0x02,0x04};

//define an isr 
ISR(INT0_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	//_delay_ms(55);//debounce
// 	volatile uint8_t c[]="niko kw a interrupt\n\r";
// 	uart_send_string(c);
	
	for (int count=0;count<3;count++)
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
	{
		RGB_PORT=rgb_led_light_sequence[count];
 108:	fc 01       	movw	r30, r24
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	20 81       	ld	r18, Z
 114:	25 b9       	out	0x05, r18	; 5
		
		if(count==3){
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	91 05       	cpc	r25, r1
 11a:	79 f0       	breq	.+30     	; 0x13a <__vector_1+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	37 ea       	ldi	r19, 0xA7	; 167
 120:	41 e6       	ldi	r20, 0x61	; 97
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	40 40       	sbci	r20, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_1+0x36>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_1+0x40>
 12c:	00 00       	nop
ISR(INT0_vect){
	//_delay_ms(55);//debounce
// 	volatile uint8_t c[]="niko kw a interrupt\n\r";
// 	uart_send_string(c);
	
	for (int count=0;count<3;count++)
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	91 05       	cpc	r25, r1
 134:	4c f3       	brlt	.-46     	; 0x108 <__vector_1+0x1c>
			count=0;//reset count when count reaches 3
		}
		_delay_ms(2000);
	}
	
	RGB_PORT=INPUT;
 136:	15 b8       	out	0x05, r1	; 5
	
}
 138:	0c c0       	rjmp	.+24     	; 0x152 <__vector_1+0x66>
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	97 ea       	ldi	r25, 0xA7	; 167
 13e:	21 e6       	ldi	r18, 0x61	; 97
 140:	81 50       	subi	r24, 0x01	; 1
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	20 40       	sbci	r18, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <__vector_1+0x54>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__vector_1+0x5e>
 14a:	00 00       	nop
ISR(INT0_vect){
	//_delay_ms(55);//debounce
// 	volatile uint8_t c[]="niko kw a interrupt\n\r";
// 	uart_send_string(c);
	
	for (int count=0;count<3;count++)
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	db cf       	rjmp	.-74     	; 0x108 <__vector_1+0x1c>
		_delay_ms(2000);
	}
	
	RGB_PORT=INPUT;
	
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_2>:
ISR(INT1_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	//_delay_ms(55);//debounce
	// 	volatile uint8_t c[]="niko kw a interrupt\n\r";
	// 	uart_send_string(c);
	
	for (int count=0;count<3;count++)
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
	{
		RGB_PORT=rgb_led_light_sequence[count];
 186:	fc 01       	movw	r30, r24
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	20 81       	ld	r18, Z
 192:	25 b9       	out	0x05, r18	; 5
		
		if(count==3){
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	91 05       	cpc	r25, r1
 198:	79 f0       	breq	.+30     	; 0x1b8 <__vector_2+0x4e>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	37 ea       	ldi	r19, 0xA7	; 167
 19e:	41 e6       	ldi	r20, 0x61	; 97
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	40 40       	sbci	r20, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <__vector_2+0x36>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <__vector_2+0x40>
 1aa:	00 00       	nop
ISR(INT1_vect){
	//_delay_ms(55);//debounce
	// 	volatile uint8_t c[]="niko kw a interrupt\n\r";
	// 	uart_send_string(c);
	
	for (int count=0;count<3;count++)
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	91 05       	cpc	r25, r1
 1b2:	4c f3       	brlt	.-46     	; 0x186 <__vector_2+0x1c>
			count=0;//reset count when count reaches 3
		}
		_delay_ms(2000);
	}
	
	RGB_PORT=INPUT;
 1b4:	15 b8       	out	0x05, r1	; 5
	
}
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <__vector_2+0x66>
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	97 ea       	ldi	r25, 0xA7	; 167
 1bc:	21 e6       	ldi	r18, 0x61	; 97
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <__vector_2+0x54>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <__vector_2+0x5e>
 1c8:	00 00       	nop
ISR(INT1_vect){
	//_delay_ms(55);//debounce
	// 	volatile uint8_t c[]="niko kw a interrupt\n\r";
	// 	uart_send_string(c);
	
	for (int count=0;count<3;count++)
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	db cf       	rjmp	.-74     	; 0x186 <__vector_2+0x1c>
		_delay_ms(2000);
	}
	
	RGB_PORT=INPUT;
	
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <main>:


int main(void)

{
	DDRC=(0xFF);
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	87 b9       	out	0x07, r24	; 7
	//SET LEDPORT AS OUTPUT
	RGB_DDR=OUTPUT;
 1ec:	84 b9       	out	0x04, r24	; 4
	//initialize interrupt
	interrupt_init(INTERRUPT_PIN_1,falling_edge_0);//enable interrupt 0 on the rising edge 
 1ee:	6e ef       	ldi	r22, 0xFE	; 254
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <interrupt_init>
    /* Replace with your application code */
    while (1) 
    {
		//uart_send_string(feedback);
PORTC^=0XFF;
 1f6:	88 b1       	in	r24, 0x08	; 8
 1f8:	80 95       	com	r24
 1fa:	88 b9       	out	0x08, r24	; 8
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	83 ed       	ldi	r24, 0xD3	; 211
 200:	90 e3       	ldi	r25, 0x30	; 48
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x1a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x24>
 20c:	00 00       	nop
 20e:	f3 cf       	rjmp	.-26     	; 0x1f6 <main+0xe>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
