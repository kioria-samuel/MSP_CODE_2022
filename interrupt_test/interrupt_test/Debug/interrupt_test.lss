
interrupt_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000783  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c3  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  8e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
//ISR
ISR(INT0_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	26 97       	sbiw	r28, 0x06	; 6
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
	int display[]={0x01,0x02,0x04};
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f1 e0       	ldi	r31, 0x01	; 1
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <__vector_1+0x34>
		int color=0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_1+0x46>
			PORTB=display[color];
			_delay_ms(200);
			color++;
			if (color==3)
			{
				color=0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
ISR(INT0_vect){
	int display[]={0x01,0x02,0x04};
		int color=0;
		while ( color<3)
		{
			PORTB=display[color];
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	2c 0f       	add	r18, r28
  e8:	3d 1f       	adc	r19, r29
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	20 81       	ld	r18, Z
  f0:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	3f ef       	ldi	r19, 0xFF	; 255
  f4:	43 ec       	ldi	r20, 0xC3	; 195
  f6:	29 e0       	ldi	r18, 0x09	; 9
  f8:	31 50       	subi	r19, 0x01	; 1
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <__vector_1+0x62>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__vector_1+0x6c>
 102:	00 00       	nop
			_delay_ms(200);
			color++;
 104:	01 96       	adiw	r24, 0x01	; 1
			if (color==3)
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	31 f3       	breq	.-52     	; 0xd8 <__vector_1+0x42>
#include <avr/interrupt.h>
//ISR
ISR(INT0_vect){
	int display[]={0x01,0x02,0x04};
		int color=0;
		while ( color<3)
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	91 05       	cpc	r25, r1
 110:	2c f3       	brlt	.-54     	; 0xdc <__vector_1+0x46>
			
		
// 	PORTB^=(1<<PB5);
// 	_delay_ms(300);
	
}
 112:	26 96       	adiw	r28, 0x06	; 6
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <main>:
int main(void)
{
	
	DDRD=(0x00);//make port d as input
 13e:	1a b8       	out	0x0a, r1	; 10
	DDRB=(0xff);//make port b as output
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 b9       	out	0x04, r24	; 4
	DDRC=(0xff);
 144:	87 b9       	out	0x07, r24	; 7
	EIMSK=(1<<INT0);//enable interrupt 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	8d bb       	out	0x1d, r24	; 29
	EICRA=(0x03);//
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	PORTD=(1<<PD2);//ACTIVE INTRNAL PULL RES
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	8b b9       	out	0x0b, r24	; 11
	sei();
 154:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		PORTC^=(0xff);
 156:	88 b1       	in	r24, 0x08	; 8
 158:	80 95       	com	r24
 15a:	88 b9       	out	0x08, r24	; 8
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x24>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x2e>
 16c:	00 00       	nop
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <main+0x18>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
