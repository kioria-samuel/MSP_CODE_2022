
timer0config_delay_function atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d5  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000645  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000243  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000014b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ngoja>:
		ngoja(0X83);
		/*_delay_ms(100);*/
    }
}
void ngoja(int start_value_hex){
	TCCR0A=0x00;
  80:	14 bc       	out	0x24, r1	; 36
	TCCR0B=1<<CS00|1<<CS02;//select prescaler as1024
  82:	95 e0       	ldi	r25, 0x05	; 5
  84:	95 bd       	out	0x25, r25	; 37
	TCNT0=start_value_hex;
  86:	86 bd       	out	0x26, r24	; 38
	 while((TIFR0 & 0x01) == 0);//wait till timer overflow flag is raised
  88:	a8 9b       	sbis	0x15, 0	; 21
  8a:	fe cf       	rjmp	.-4      	; 0x88 <ngoja+0x8>
	  //reset the registers
	  TCCR0A = 0x00;
  8c:	14 bc       	out	0x24, r1	; 36
	  TCCR0B = 0x00;
  8e:	15 bc       	out	0x25, r1	; 37
	  TIFR0 = 0x1;//CLEARING THE TIMER OVERFLOW INTERRUPT
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	85 bb       	out	0x15, r24	; 21
  94:	08 95       	ret

00000096 <main>:
#include <avr/delay.h>
//initialize timer function
void ngoja(int start_value_hex);
int main(void)
{
	DDRB=1<<PB5;//configure port as output
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	84 b9       	out	0x04, r24	; 4
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB=(1<<PB5);
  9a:	c0 e2       	ldi	r28, 0x20	; 32
  9c:	c5 b9       	out	0x05, r28	; 5
		ngoja(0X83);
  9e:	83 e8       	ldi	r24, 0x83	; 131
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 40 00 	call	0x80	; 0x80 <ngoja>
	/*	_delay_ms(100);*/
		PORTB=(0b00000000);
  a6:	15 b8       	out	0x05, r1	; 5
		ngoja(0X83);
  a8:	83 e8       	ldi	r24, 0x83	; 131
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 40 00 	call	0x80	; 0x80 <ngoja>
  b0:	f5 cf       	rjmp	.-22     	; 0x9c <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
